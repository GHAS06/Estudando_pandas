1 - O que é a Psycopg2?

A biblioteca psycopg2 é uma biblioteca popular e amplamente utilizada para conectar e interagir com bancos de dados PostgreSQL em aplicações Python.
Ela fornece uma interface eficiente, segura e completa para executar operações SQL, manipular transações, lidar com pools de conexão e realizar operações
específicas do PostgreSQL, como a utilização do protocolo de cópia em massa.

2 - Principais Funcionalidades e Métodos

Conexão com o Banco de Dados

- psycopg2.connect():

	Descrição: Cria uma conexão com o banco de dados PostgreSQL.

	Parâmetros:

		- dbname: Nome do banco de dados.

		- user: Nome do usuário.

		- password: Senha do usuário.

		- host: Endereço do servidor do banco de dados.
	
		- port: Porta do banco de dados.

	Sintaxe:

		connection = psycopg2.connect(dbname='nome_banco', user='usuario', password='senha', host='localhost', port='5432')

	Como funciona: Retorna um objeto de conexão ao banco de dados PostgreSQL.

Execução de Consultas
  
- cursor.execute():

	Descrição: Executa comandos SQL no banco de dados conectado.
	
	Parâmetros:

		- query: String contendo o comando SQL a ser executado.

		- params: (Opcional) Tupla de parâmetros para consulta parametrizada.

	Sintaxe:

		cursor.execute("SELECT * FROM tabela WHERE id = %s", (id,))

	Como funciona: Executa o comando SQL especificado.


- cursor.fetchall():

	Descrição: Recupera todos os resultados de uma consulta SELECT.

	Sintaxe:

		resultados = cursor.fetchall()

	Como funciona: Retorna uma lista contendo todos os registros da consulta.


- cursor.fetchone():

	Descrição: Recupera apenas um registro do resultado da consulta.

	Sintaxe:

		resultado = cursor.fetchone()

	Como funciona: Retorna o próximo registro da consulta ou None se não houver mais.

Gerenciamento de Transações

- connection.commit():

	Descrição: Confirma (commit) as alterações realizadas no banco de dados.

	Sintaxe:

		connection.commit()

	Como funciona: Garante que as alterações feitas durante a transação sejam aplicadas permanentemente.

- connection.rollback():

	Descrição: Reverte alterações não confirmadas em caso de erro.

	Sintaxe:

		connection.rollback()

	Como funciona: Desfaz alterações realizadas durante a transação atual.

Fechamento de Conexões
	
	OBSERVAÇÃO: Podemos usar o operador with para realizar essa função

- cursor.close():

	Descrição: Fecha o cursor usado para executar consultas SQL.

	Sintaxe:

		cursor.close()

	Como funciona: Libera os recursos associados ao cursor.

- connection.close():

	Descrição: Fecha a conexão com o banco de dados.

	Sintaxe:

		connection.close()

	Como funciona: Libera os recursos associados à conexão.

Manipulação de Dados em Massa
  
 - .copy_from(file, table, sep=','):

	Descrição: Importa dados de um arquivo ou objeto similar a um arquivo diretamente para uma tabela no banco de dados.

	Parâmetros:

		- file: Objeto de arquivo contendo os dados a serem importados.

		- table: Nome da tabela onde os dados serão inseridos.

		- sep: Caractere separador dos campos (padrão: tabulação \t).

		- columns: Lista opcional de colunas a serem populadas.

	Sintaxe:

	cursor.copy_from(file, table, sep='\t', columns=None)

	Como funciona: Os dados no arquivo são lidos e transferidos diretamente para a tabela especificada. Cada linha do arquivo corresponde a um registro na tabela.
    
   - .copy_to(file, table, sep=','):

     Descrição: Exporta os dados de uma tabela para um arquivo ou objeto similar a um arquivo.

	Parâmetros:

		- file: Objeto de arquivo para onde os dados serão exportados.

		- table: Nome da tabela cujos dados serão exportados.

		- sep: Caractere separador dos campos (padrão: tabulação \t).

		- columns: Lista opcional de colunas a serem exportadas.

	Sintaxe:

		cursor.copy_to(file, table, sep='\t', columns=None)

	Como funciona: Os dados da tabela especificada são lidos e gravados no arquivo fornecido, uma linha por registro.

- cursor.copy_expert()

	Descrição: Permite executar comandos COPY personalizados diretamente. É útil para situações onde você precisa de maior controle sobre o processo de cópia.

	Parâmetros:

		- sql: Comando SQL COPY a ser executado.

		- file: Objeto de arquivo associado ao comando.

	Sintaxe:

		cursor.copy_expert(sql, file)

	Como funciona: O comando SQL especificado é executado diretamente, permitindo personalizações como formatos específicos de arquivo ou manipulação de delimitadores.

## Função .copy()

A função copy() é um método disponibilizado pela biblioteca psycopg2 que permite realizar operações de cópia em massa entre arquivos e tabelas do banco de dados PostgreSQL.
Essas operações são executadas de forma muito eficiente, sendo ideais para grandes volumes de dados.

Ela trabalha com os comandos PostgreSQL COPY FROM (para importar dados de um arquivo para o banco) e COPY TO (para exportar dados de uma tabela para um arquivo). 
Esses comandos são diretamente suportados pela função copy() e suas variantes.