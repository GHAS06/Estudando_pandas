1 - Reaproveitando a Anotação sobre .assing() da Anotação Adicionando_Colunas_em_
DataFrames2.txt, utilizando .assig()

    - Adicionando coluna via função .assing()
    
        O método .assign() permite adicionar ou modificar colunas em um DataFrame de forma 
        não destrutiva, ou seja, ele retorna um novo DataFrame ao invés de modificar o 
        original.

        Sintaxe:

            DataFrame.assign(**kwargs)

            **kwargs -> Cada argumento de palavra-chave corresponde ao nome de uma nova
            coluna e sua respectiva fórmula, lista, ou cálculo.

            Exemplo: assign(nova_coluna=lista, outra_coluna=fórmula)
            
            Nome da nova coluna -> seguido pelo valor ou fórmula que a define.
            Aceita listas, arrays, ou funções/lambdas que retornam colunas baseadas 
            no DataFrame.

        # Exemplo básico:
        
            # Usando assign para adicionar uma nova coluna
                df = pd.DataFrame({
                'A': [1, 2, 3],
                'B': [4, 5, 6]
            })  

            # Adicionando via .assign()

            df = df.assign(C=[7, 8, 9])
            print(df)

            SAIDA:
               A  B  C
            0  1  4  7
            1  2  5  8
            2  3  6  9
        
    # Encadeamento de operações com .assign()
        Uma grande vantagem do .assign() é que ele permite encadear várias operações sem 
        modificar o DataFrame original.

        # Exemplo com encadeamento
            new_df = (
                df.assign(D=df['A'] + df['B'], E=lambda x: x['C'] * 2)
            )

            print(new_df)
        
        SAIDA:
           A  B  C   D   E
        0  1  4  7   5  14
        1  2  5  8   7  16
        2  3  6  9   9  18

        O que aconteceu:
            A coluna D foi criada somando A e B.
            A coluna E foi criada usando uma função lambda, multiplicando os valores de C 
            por 2.

        # Adicionar múltiplas colunas
        df = df.assign(
            F=lambda x: x['A'] * 10,  # Função lambda para cálculo dinâmico
            G=[True, False, True]     # Adição direta de lista
        )

        print(df)

        SAIDA:
           A  B  C   F      G
        0  1  4  7  10   True
        1  2  5  8  20  False
        2  3  6  9  30   True

2 - Formas de utilizar funções completas ou lambada na função .assing()

    - Primeira Forma de usar o .assig() com funções completas:

        # Definindo a lista de colunas que vamos Trabalhar
        lista_colunas =['Valor Inicial Compra', 'Valor Final Compra']
        # Exibindo a lista de colunas
        print(df[lista_colunas[0:2]])
        #print(type(df)) -> <class 'pandas.core.frame.DataFrame'>

        # Usando a função applymap()
        # Realizando tratamento de dados das colunas e convertendo para float
        df[lista_colunas] = df[lista_colunas].applymap(lambda x: float(x.replace(',', '.')))

        # Exibindo o DataFrame tratado
        print(df[lista_colunas].info())

        # criando função para adicionar coluna utilizando .assing()
        def multiplicação_colunas_dataframe(df):
        return df['Valor Inicial Compra'] * df['Valor Final Compra']

        # inserindo coluna com .assing()
            '''
                Lembre-se: parâmetro é o nome da coluna e o valor do parâmetro é o 
                valor da coluna

                - Cada argumento de palavra-chave corresponde ao nome de uma nova:
    
                 coluna e sua respectiva fórmula, lista, ou cálculo.

                    Exemplo: assign(nova_coluna=lista, outra_coluna=fórmula)
            
                    Nome da nova coluna -> seguido pelo valor ou fórmula que a define.
                    Aceita listas, arrays, ou funções/lambdas que retornam colunas baseadas 
                    no DataFrame.
            '''

            a = df.assign(
                Multiplicação_Colunas=multiplicação_colunas_dataframe(df)
                ).loc[:,['Valor Inicial Compra', 'Valor Final Compra', 'Multiplicação_Colunas']]
            print(a)

    - Segunda Forma de usar o .assing() com função lambda

        # As funções lambda são geralmente usadas 
        para operações rápidas e simples, onde você não quer definir uma função completa 
        com def(funções que nós criamos).

        # Podemos Obter o mesmo resultado usando a função lambda

            a = df.assign(Multiplicação_Colunas_com_lambda = lambda x: x['Valor Inicial Compra'] * x['Valor Final Compra'])
            print(a.loc[0:5,['Valor Inicial Compra','Valor Final Compra','Multiplicação_Colunas_com_lambda']])

3 - Reaproveitando Anotação da Anotação Adicionando_Colunas_em_DataFrames1.txt
DataFrames2.txt, Selecionado com a função loc e adicionando com lista ou .assing()
      
     # Criando um DataFrame de exemplo
        df = pd.DataFrame({
            'Produto': ['A', 'B', 'C', 'D', 'E'],
            'Vendas': [100, 200, 300, 400, 500]
        })

        # Adicionando valores a uma nova coluna usando loc e uma lista
        df.loc[0:2, 'Desconto'] = [10, 20, 30]
        print(df)

    # Adicionando uma nova coluna com .assing() calculando uma nova métrica
        df = df.assign(Valor_Final=lambda x: x['Vendas'] - (x['Vendas'] * 0.1))
        print(df)

    # Aplicando uma regra com loc e função lambda para atualizar valores
        df.loc[df['Vendas'] > 300, 'Categoria'] = 'Alto'
        df.loc[df['Vendas'] <= 300, 'Categoria'] = 'Baixo'

        print(df)

    # Substituindo um intervalo de linhas de forma direta
        df.loc[0:2, 'Vendas'] = 999
        print(df)