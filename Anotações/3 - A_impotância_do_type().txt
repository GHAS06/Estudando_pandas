1 - Vamos falar da função type() e da sua importância de utilizar no pandas

A função type() é uma ferramenta do Python que permite identificar o tipo de dados
de um objeto ou variável. Isso é essencial quando estamos manipulando dados, pois 
conhecer o tipo de dado ajuda a prever o comportamento das operações realizadas.

No caso do pandas, essa função se torna ainda mais relevante porque os dados dentro
de estruturas como Series ou DataFrame podem ter tipos internos diferentes do que 
aparentam. Isso acontece porque o pandas trabalha com uma grande variedade de tipos,
muitas vezes invisíveis ou implícitos.

EXEMPLO mais comum: 

    10 != '10' and 10 != 10.0

    Um 10 inteiro não é igual a um 10 String, para descobrir qual tipo de dados
    ele pertence, podemos utilizar o print(type(objeto/variável)).

    print(10) # saida -> <class 'int'>
    print('10') # saida -> <class 'str'>
    print(10.0) # -> <class 'float'>

    A saída mostra a classe correspondente ao tipo de dado de cada valor. 
    Essa lógica também se aplica ao pandas, onde é comum encontrar situações em que
    o tipo de dado precisa ser verificado para evitar erros.

2 -  Usando type para descobrirmos os tipos_de_dados/estrutura_de_dados no pandas

    # Vamos criar algumas variáveis e, em seguida, uma Series no pandas. 
    Assim, podemos explorar seus tipos de dados

    a = 10 # saida com type() -> <class 'int'>              
    b = '10' # saida com type() -> <class 'str'>
    c = 10.0 # saida com type() -> <class 'float'>
    d = tuple('Cachorro') # saida com type() -> <class 'tuple'>
    e = ['10'] # saida com type() -> <class 'list'>
    f = {30} # saida com type() -> <class 'set'>
    g = {0:10} # saida com type() -> <class 'dict'>

    Serie = pd.Serie([a,b,c])
    print(type(Serie)) # saida -> <class 'pandas.core.series.Series'>

    Veja que, ao criar uma Series, o type() confirma que se trata de um objeto do 
    tipo pandas.Series que é uma estrutura de dados do pandas. Dentro dessa Series, 
    os dados ainda mantêm seus tipos originais:

    print(type(Serie[0]))  # Saída: <class 'int'>
    print(type(Serie[1]))  # Saída: <class 'str'>
    print(type(Serie[2]))  # Saída: <class 'float'>

    ATENÇÃO! Quando o assunto são dados em series ou dataframes, o pandas irá 
    trabalhar da forma mais genérica possível, se não especificarmos seu 
    tipo de dados. Logo, todos os dados daquela coluna irá ser daquele tipo de dados

    EXEMPLOS:

    Uma series de dtype = int64

    Serie = pd.Series([10,20,30,40])
    print(Serie)

    SAIDA:
        0    10
        1    20
        2    30
        3    40
        dtype: int64

    Uma series de dtype = float64

    Serie = pd.Series([10,20,30,40,6.5])
    print(Serie)
    
    SAIDA:
        0    10.0
        1    20.0
        2    30.0
        3    40.0
        4     6.5
        dtype: float64

    Uma series de dtype = object

    Serie = pd.Series([10,20,30,40,6.5, '90'])  
    print(Serie)

    SAIDA:
        0     10
        1     20
        2     30
        3     40    
        4    6.5
        5     90
        dtype: object

    # Voltando ao Assunto de Descobrir estrutura_de_dados e tipos_de_dados implícitos

    Series = pd.Series({'a':10, 'b':2, 'c':40}, name= 'Valores')
    
    print(type(Series[0])) # saida -> <class 'numpy.int64'>

    # descobrimos que ele retorna como um array do numpy, quando fazemos o slice de
    um indicie da series, outra forma de fazer isso é assim:

    print(type(Series.array[1])) #saida -> <class 'numpy.int64'>

    # Com o DataFrame a lógica não foge muito

    IMPORTANTE -> Se selecionarmos apenas uma coluna de um Dataframe, estamos na
    verdade selecionando uma Series, ou seja, a coluna do DataFrame se torna uma
    Serie se apenas selecionarmos ela. Agora se selecionarmos uma lista de colunas
    do DataFrame, estamos retornando tipo Dataframe

    EXEMPLO:

    # Criando um DataFrame com dicionários a partir de séries

    s1 = pd.Series([1, 2, 3, 4, 5], name='c1')
    s2 = pd.Series([10, 20, 30, 40, 50], name='c2')

    df = pd.DataFrame({s1.name: s1, s2.name: s2})
    
    print(type(df['c1'])) saida -> <class 'pandas.core.series.Series'>

    print(type(df[['c1','c2']])) saida -> <class 'pandas.core.frame.DataFrame'>

    print(type(df['c1'][0])) # saída -> <class 'numpy.int64'>

    #Veja! Aqui ele saiu como um vetor do NumPy quando fazemos o slice de uma linha
    para uma coluna do DataFrame.

3 - Por Que Isso é Importante?

No pandas, muitas operações dependem do tipo de dado. Por exemplo:

Comparações entre valores podem falhar se os tipos forem diferentes.

Alguns métodos do pandas funcionam apenas com tipos específicos 
(exemplo: operações numéricas com inteiros ou floats).

Portanto, sempre que houver dúvida sobre o tipo de dado dentro de uma Series ou 
DataFrame, usar a função type() é uma boa prática para evitar erros e garantir o 
comportamento esperado.

