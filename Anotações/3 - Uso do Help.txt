1 - Help, objeto que usamos para descobrir informações de uma função

    Help() é um objeto ou módulo que usamos para descobrir informações específicas
    de outros objetos, funções ou módulos.

    Basicamente isso, utilizamos muito com print(), função nativa de exibição de dados do 
    python

    EXEMPLO:

        from pandasgui import show

        #print(help(show))
# Tem que fechar a interface do poandasgui par ao help() funcionar
'''
SAIDA -> Retorna informações sobre o objeto, módulo, função

    INFORMAÇÕES:

    Help on function show in module pandasgui.gui:

show(*args, settings: pandasgui.store.SettingsSchema = {}, **kwargs)
    Objects provided as args and kwargs should be any of the following:
    DataFrame   Show it using PandasGui
    Series      Show it using PandasGui
    Figure      Show it using FigureViewer. Supports figures from plotly, bokeh, matplotlib, altair, PIL
    dict/list   Show it using JsonViewer
'''

2 - Exemplo com a função .assing()

    print(df.assign)

SAIDA:
assign(**kwargs) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Assign new columns to a DataFrame.
    
    Returns a new object with all original columns in addition to new ones.
    Existing columns that are re-assigned will be overwritten.
    
    Parameters
    ----------
    **kwargs : dict of {str: callable or Series}
        The column names are keywords. If the values are
        callable, they are computed on the DataFrame and
        assigned to the new columns. The callable must not
        change input DataFrame (though pandas doesn't check it).
        If the values are not callable, (e.g. a Series, scalar, or array),
        they are simply assigned.
    
    Returns
    -------
    DataFrame
        A new DataFrame with the new columns in addition to
        all the existing columns.

    Notes
    -----
    Assigning multiple columns within the same ``assign`` is possible.
    Later items in '\*\*kwargs' may refer to newly created or modified
    columns in 'df'; items are computed and assigned into 'df' in order.

    Examples
    --------
    >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},
    ...                   index=['Portland', 'Berkeley'])
    >>> df
              temp_c
    Portland    17.0
    Berkeley    25.0

    Where the value is a callable, evaluated on `df`:

    >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)
              temp_c  temp_f
    Portland    17.0    62.6
    Berkeley    25.0    77.0

    Alternatively, the same behavior can be achieved by directly
    referencing an existing Series or sequence:

    >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)
              temp_c  temp_f
    Portland    17.0    62.6
    Berkeley    25.0    77.0

    You can create multiple columns within the same assign where one
    of the columns depends on another one defined within the same assign:

    >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,
    ...           temp_k=lambda x: (x['temp_f'] + 459.67) * 5 / 9)
              temp_c  temp_f  temp_k
    Portland    17.0    62.6  290.15
    Berkeley    25.0    77.0  298.15