1 - O que é o Pandas?

    O Pandas é uma biblioteca poderosa do Python projetada para trabalhar com dados 
    estruturados, como tabelas ou planilhas. Ele oferece ferramentas para manipular, 
    analisar e transformar esses dados de maneira eficiente.

    Exemplo de tabela estruturada:
_________________________
|coluna1|coluna2|coluna3| -> colunas/atributos -> possuem um domínio (tipo de dados) 
|dados1 |dados2 |dados3 | -> linha/registro -> os dados devem respeitar o domínio
-------------------------

    - Colunas/Atributos: Têm um domínio, ou seja, tipos de dados como inteiros, floats 
    ou strings.
    
    - Linhas/Registros: São conjuntos de dados agrupados, respeitando os domínios das
    colunas.

    No SQL, isso seria equivalente a uma tabela onde:
    
    - As colunas são os campos (ou atributos) com seus respectivos domínios.
    - As linhas são os registros que seguem as restrições de tipo de dado das colunas.

    Exemplo de domínio:
    domínio da coluna1 -> int(255)
    domínio da coluna2 -> float(10.2)
    domínio da coluna3 -> varchar(45) -> String

    Veja! Os dados estão estruturados e relacionados.

2 - Estruturas principais no Pandas:
    
    - Series: Uma estrutura unidimensional que representa uma única coluna ou linha
    de um DataFrame. Podem ser criadas através de listas[]
    
      parâmetros 
    Serie = pd.Series(
      data = none, 
      index = ['a','b','c'], 
      dtype = tipo de dados, 
      name = None, 
      copy = False, fastpath = False)

    data -> define os valores que serão armazenados na série.
    
    index ->  Define os rótulos dos índices da série.
    
    dtype -> Especifica o tipo de dado dos elementos da série.
    
    name -> Define o nome da série. Esse atributo é útil em operações que envolvem 
    várias séries ou dataframes.
    
    copy -> indica se os dados fornecidos devem ser copiados. Se True, cria uma cópia 
    independente dos dados fornecidos; se False, os dados originais são usados 
    diretamente.

    EXEMPLO DE SERIES:
    
    # usando parâmestros
    lista_num = [10,20,30] 
    Serie = pd.Series(data=lista_num)
    print(Serie)

    # fazendo de forma padrão
   
    Series = pd.Series([10,20,30])
    print(Serie)

    # também é possível fazer com o próprio dicionário, veja!

    Series = pd.Series({'a':10, 'b':2, 'c':40})
    print(Series)

    nesse caso, serie com o dicionário, a chave vira o indicie e o valores
    é o dado, propriamente dito.
    
    IMPORTANTE -> Se selecionarmos apenas uma coluna de um Dataframe, estamos na
    verdade selecionando uma Series, ou seja, a coluna do DataFrame se torna uma
    Serie se apenas selecionarmos ela. Agora se selecionarmos uma lista de colunas
    do DataFrame, estamos retornando tipo Dataframe

    EXEMPLO:

    print(type(df['c1'])) saida -> <class 'pandas.core.series.Series'>

    print(type(df[['c1','c2']])) saida -> <class 'pandas.core.frame.DataFrame'>

    - DataFrame: Uma tabela bidimensional com linhas e colunas 
    (semelhante a uma planilha Excel ou tabela SQL).
    
    EXEMPLO de DATAFRAME:

      parâmestros
    DataFrame = pd.DataFrame(
      data = none
      index = False
      columns = none
      dtype = float64
      copy = False)

    data -> Este é o principal parâmetro de entrada para o DataFrame. Ele pode ser
    uma lista, dicionário, array NumPy, Series, ou até outro DataFrame.
    
    index -> (opcional) Especifica os rótulos (índices) das linhas do DataFrame. 
    Se não for fornecido, o Pandas atribui índices padrão inteiros (0, 1, 2, ...).
    
    Nota: Se o comprimento de index não coincidir com o número de linhas em data,
    ocorrerá um erro.
    
    columns -> Este parâmetro define os rótulos das colunas do DataFrame. Caso não
    seja especificado, o Pandas usa os rótulos do índice da entrada (se fornecido) ou
    atribui nomes

    Nota: Se o número de colunas não coincidir com o número de colunas em data, o
    correrá um erro.

    dtype -> Especifica o tipo de dados que as colunas do DataFrame devem ter. O 
    Pandas tentará inferir automaticamente o tipo de dados de cada coluna, mas você 
    pode forçar um tipo específico com este parâmetro.

    Nota: Se não for especificado, o Pandas escolherá o tipo de dados automaticamente 
    com base nos dados fornecidos.

    copy -> Controla se o DataFrame deve ser uma cópia independente dos dados 
    fornecidos. Se False, o DataFrame pode compartilhar os dados com o objeto original
    (como uma visão, ao invés de uma cópia completa).

    Nota: Isso pode ser importante para otimização de memória, pois a cópia de 
    grandes DataFrames pode ser cara em termos de recursos.
    
    EXEMPLOS DE DATAFRAMES:

    # Usando parâmetros

    # Criando DATAFRAME apartir de SERIES com listas e dicionário

    s1 = pd.Series([10,20,39], name = c1)
    s2 = pd.Series([30,40,50], name = c2)

    df = pd.DataFrame([s1,s2])
    print(df)

    # usando parâmetros 
    lista_coluna = [s1,s2]
    df = pd.DataFrame(data = lista_coluna )    

    Nota: dessa forma com lista o pandas entende que cada serie é uma linha, 
    não colunas, devemos tomar cuidado com isso.

    # Criando um DataFrame com dicionário da Series
                            
                            chave:valor|chave:valor
    df = pd.DataFrame({'coluna1':s1, 'coluna2':s2})
    print(df)

    Nota:Para retornar a series como colunas, precisamos transfomá-los em dicionários
    dicionários -> chave:valor

    # Segunda forma de fazer a mesma coisa acima
    
    df = pd.DataFrame({s1.name:s1, s2.name:s2})
    print(df)

3 - Como trabalhar com Pandas? 

    Para trabalhar com Pandas no VSCode (ou qualquer outro ambiente Python), será 
    necessário instalá-lo. Você também pode instalar o NumPy, que é uma biblioteca 
    base para manipulação de números e vetores. Siga os comandos abaixo:

    - Instale o Pandas:
      pip install pandas 

    - Instale o NumPy (opcional, mas recomendado):
      pip install numpy

    - Verifique se o Pandas está instalado:
      python -c "import pandas as pd; print(pd.__version__)"

    O comando acima exibirá a versão instalada do Pandas. Se houver erros, você 
    precisa reinstalá-lo.

3 - Importando as bibliotecas no nosso código:

    Após instalar o Pandas e o NumPy, importe as bibliotecas no seu código Python:

    import pandas as pd
    import numpy as np

    Exemplo básico com Pandas:
    
    # Criando um DataFrame a partir de um dicionário
    data = {
        'Nome': ['Alice', 'Bob', 'Carlos'],
        'Idade': [25, 30, 35],
        'Salário': [5000.0, 6000.0, 7000.0]
    }

    df = pd.DataFrame(data)
    print(df)
    

    Saída esperada:
    
       Nome  Idade  Salário
    0  Alice     25   5000.0
    1    Bob     30   6000.0
    2  Carlos    35   7000.0

